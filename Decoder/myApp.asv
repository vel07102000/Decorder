function myApp()
    % Singleton check
    appTag = 'MySingletonGUI';
    existingFig = findall(0, 'Type', 'figure', 'Tag', appTag);
    if ~isempty(existingFig)
        figure(existingFig);
        return;
    end

    % Main figure
    hFig = figure('Name', 'Part Decoder', ...
        'NumberTitle', 'off', ...
        'MenuBar', 'none', ...
        'ToolBar', 'none', ...
        'Tag', appTag, ...
        'Position', [500, 300, 640, 520], ...
        'Resize', 'off', ...
        'Color', [0.95 0.95 0.95]);

    % Create tab group
    hTabGroup = uitabgroup('Parent', hFig);
    tab1 = uitab('Parent', hTabGroup, 'Title', 'Decoder');

    % UI Layout
    labelFont = 10;
    inputFont = 10;
    leftX = 20;
    width1 = 80;
    width2 = 300;
    height = 25;
    spacing = 10;
    y = 440;

    % JSON File Label
    uicontrol('Style', 'text', 'Parent', tab1, ...
        'String', 'Excel File:', ...
        'Position', [leftX, y, width1, height], ...
        'HorizontalAlignment', 'left', ...
        'FontSize', labelFont);

    % Excel File Path
    hFilePath = uicontrol('Style', 'edit', 'Parent', tab1, ...
        'Position', [leftX + width1 + spacing, y, width2, height], ...
        'FontSize', inputFont);

    % Browse button
    uicontrol('Style', 'pushbutton', 'Parent', tab1, ...
        'String', 'Browse', ...
        'Position', [leftX + width1 + width2 + 2 * spacing, y, 80, height], ...
        'FontSize', inputFont, ...
        'Callback', @(~, ~) browseExcelFile(hFilePath));

    y = y - height - spacing;

    % Part Number Label
    uicontrol('Style', 'text', 'Parent', tab1, ...
        'String', 'Part No:', ...
        'Position', [leftX, y, width1, height], ...
        'HorizontalAlignment', 'left', ...
        'FontSize', labelFont);

    % Part Number Input
    hPartNo = uicontrol('Style', 'edit', 'Parent', tab1, ...
        'Position', [leftX + width1 + spacing, y, width2, height], ...
        'FontSize', inputFont, ...
        'Tag', 'PartInput');

    % Decode button
    hLoadBtn = uicontrol('Style', 'pushbutton', 'Parent', tab1, ...
        'String', 'Decode', ...
        'Position', [leftX + width1 + width2 + 2 * spacing, y, 80, height], ...
        'FontSize', inputFont);

    % Clear button
    hClearBtn = uicontrol('Style', 'pushbutton', 'Parent', tab1, ...
        'String', 'Clear', ...
        'Position', [leftX + width1 + width2 + 2 * spacing + 90, y, 80, height], ...
        'FontSize', inputFont);

    % Decode Details button (New button above the table)
    hDecodeDetailsBtn = uicontrol('Style', 'pushbutton', 'Parent', tab1, ...
        'String', 'Decode Details', ...
        'Position', [leftX + width1 + width2 + 2 * spacing + 180, y, 100, height], ...
        'FontSize', inputFont, ...
        'Callback', @(~, ~) displayDecodeDetails(hPartNo, hFilePath));

    y = y - height - spacing;
    
    % Save button
    hSaveBtn = uicontrol('Style', 'pushbutton', 'Parent', tab1, ...
        'String', 'Save', ...
        'Position', [leftX + width1 + width2 + 2 * spacing + 290, y, 80, height], ...
        'FontSize', inputFont, ...
        'Callback', @(~, ~) saveTableData(hTable));

    % Data table
    hTable = uitable('Parent', tab1, ...
        'Position', [leftX, 40, 580, 330], ...
        'Data', {}, ...
        'ColumnWidth', {150, 150,60, 60,60,60}, ...
        'FontSize', 10, ...
        'RowStriping', 'on');

    % Callbacks
    set(hLoadBtn, 'Callback', @(~, ~) loadExcelData(hPartNo, hFilePath, hTable));
    set(hClearBtn, 'Callback', @(~, ~) clearInputs(hPartNo, hFilePath, hTable));

    % Focus cursor on PartNo box at start
    uicontrol(hPartNo);
end

% --- Browse Excel File ---
function browseExcelFile(hFilePath)
    [file, path] = uigetfile({'*.xlsx;*.xls', 'Excel Files (*.xlsx, *.xls)'}, 'Select Excel File');
    if isequal(file, 0)
        return;
    end
    fullFilePath = fullfile(path, file);
    set(hFilePath, 'String', fullFilePath);
end

% --- Clear Inputs ---
function clearInputs(hPartNo, hFilePath, hTable)
    set(hPartNo, 'String', '');
    set(hFilePath, 'String', '');
    set(hTable, 'Data', {});
end

% --- Display Decode Details (Callback for Decode Details button) ---
function displayDecodeDetails(hPartNo, hFilePath)
    partNo = strtrim(get(hPartNo, 'String'));
    excelFile = strtrim(get(hFilePath, 'String'));

    if isempty(partNo) || isempty(excelFile)
        warndlg('Please enter a part number and select an Excel file.', 'Missing Input');
        return;
    end

    try
        partDetails = decodepart_excel2(excelFile, partNo);
        resultTable = {};
        if isfield(partDetails, 'Product_Family_info') && ~isempty(partDetails.Product_Family_info)
            productFamilyData = partDetails.Product_Family_info{:,:};
            productNumber = productFamilyData{1, 1};
            Frequency_range = productFamilyData{1, 2};
            trimMode = productFamilyData{1, 3};
            resultTable = [resultTable; {'Product Number', productNumber}];
            resultTable = [resultTable; {'Frq Range', Frequency_range}];
            resultTable = [resultTable; {'Trim Mode', trimMode}];
        else
            resultTable = [resultTable; {'Product Family', 'No match found'}];
        end
        if isfield(partDetails, 'frequency_hz') && ~isnan(partDetails.frequency_hz)
            frequencyRange = sprintf('%.2f MHz', partDetails.frequency_hz / 1e6);
            resultTable = [resultTable; {'Output frq', frequencyRange}];
        else
            resultTable = [resultTable; {'Frequency Range', 'No data available'}];
        end
        detailFig = figure('Name', 'Decoded Part Details', 'NumberTitle', 'off', 'Position', [600, 300, 600, 400]);
        uitable('Parent', detailFig, ...
                'Position', [20, 50, 560, 300], ...
                'Data', resultTable, ...
                'ColumnName', {'Name', 'Value'}, ...
                'ColumnWidth', {200, 200}, ...
                'FontSize', 10, ...
                'RowStriping', 'on');

    catch ME
        warndlg(['Error decoding part: ' ME.message], 'Decoding Error');
    end
end

function loadExcelData(hPartNo, hFilePath, hTable)
    % Get user inputs
    partNo = strtrim(get(hPartNo, 'String'));
    excelFile = strtrim(get(hFilePath, 'String'));

    if isempty(partNo) || isempty(excelFile)
        warndlg('Please enter a part number and select an Excel file.', 'Missing Input');
        return;
    end

    try
        % Decode
        partDetails = decodepart_excel2(excelFile, partNo);
        resultTable = {};

        % Check if Specs_sheet_info is available
        if isfield(partDetails, 'Specs_sheet_info') && ~isempty(partDetails.Specs_sheet_info)
            specsTable = partDetails.Specs_sheet_info;

            % Convert the table to a cell array to prevent type mismatch
            specsCell = table2cell(specsTable);

            % Optional: Extract and use original column names as headers
            colNames = specsTable.Properties.VariableNames;

            % Combine headers and data
            resultTable = [colNames; specsCell];
        else
            resultTable = {'Specs Info', 'No data found'};
        end

        % Update the UI table
        set(hTable, 'Data', resultTable);
        set(hTable, 'Data', resultTable);
        set(hTable, 'UserData', resultTable);  % <--- Save for later use
    

    catch ME
        warndlg(['Error decoding part: ' ME.message], 'Decoding Error');
    end
end



